#!/bin/sh
#  _        _             _
# | |      / \   _ __ ___| |__
# | |     / _ \ | '__/ __| '_ \
# | |___ / ___ \| | | (__| | | |
# |_____/_/   \_\_|  \___|_| |_|
#
# Script for automatically configuring a fresh Arch linux install.
# by nebulaeandstars@gmail.com


################################################################################
# CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS ########
################################################################################

DIR=$(cd $(dirname $0) && pwd)

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
RESET="$(tput sgr0)"


################################################################################
# FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS ########
################################################################################

# installs a suckless fork, assuming that it exists.
install_suckless_fork() {
    echo "$MAGENTA  installing $1"
    echo "------------------------------""$RESET"

    if ! which "$1" > /dev/null 2>&1 ; then

        CONTINUE=" "
        while [ "$CONTINUE" != "" ] && \
              [ "$CONTINUE" != "y" ] && \
              [ "$CONTINUE" != "Y" ] && \
              [ "$CONTINUE" != "n" ] && \
              [ "$CONTINUE" != "N" ] ; do
            read -p "  continue? (Y/n): " CONTINUE
        done

        mkdir -p "$HOME/.local/src/suckless" || exit
        cd "$HOME/.local/src/suckless" || exit
        git clone "https://github.com/nebulaeandstars/$1.git" "$1" 2>/dev/null
        cd "$1" || exit
        sudo make install
    else
        echo "$1 is already installed."
    fi
    echo
}


################################################################################
# PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM ########
################################################################################


echo  "$BLUE"' _        _             _
| |      / \   _ __ ___| |__
| |     / _ \ |  __/ __|  _ \
| |___ / ___ \| | | (__| | | |
|_____/_/   \_\_|  \___|_| |_|'"$RESET"

# change into the larch directory.
cd "$DIR"

# make sure that the archlinux servers are reachable.
echo "$BLUE"
echo "----------------------------------------"
echo "connecting to the archlinux.org servers..."
echo "$RESET"

ping -c 1 -W 2 archlinux.org || {
    echo "$RED""----------------------------------------"
    echo "cannot connect to the internet. aborting..."
    echo "$RESET"
    exit
}
echo "$BLUE"
echo "connection success!"
echo "----------------------------------------"

# update the system.
echo "updating the system..."
echo "$RESET"

sudo pacman -Syu || {
    echo "$RED""----------------------------------------"
    echo "system update is required. aborting..."
    echo "$RESET"
    exit
}

echo "$BLUE"
echo "the system is up to date."
echo "----------------------------------------"

# install git and paru
echo "installing git and paru..."
echo "$RESET"

# install git
if ! pacman -Qs "git" > /dev/null ; then
    sudo pacman -S "git" --noconfirm
else
    echo "git is already installed."
fi

# install paru
if ! pacman -Qi paru > /dev/null 2>&1 ; then
    cd /tmp || exit
    rm -rf paru
    git clone https://aur.archlinux.org/paru-bin.git paru
    cd paru || exit
    makepkg -si --noconfirm
else
    echo "paru is already installed."
fi

echo "$BLUE"
echo "git and paru are installed."
echo "----------------------------------------"


################################################################################
# INSTALL # INSTALL # INSTALL # INSTALL # INSTALL # INSTALL # INSTALL ##########
################################################################################

# for each pkg-file in ./pkg, install all packages in that file.
echo "installing packages..."

cd "$DIR/pkg"
for PKG_FILE in $(ls) ; do
    echo "$RESET"

    # display the contained packages,
    echo "$MAGENTA  $PKG_FILE"
    echo "------------------------------"
    sed "s/^\s*//g ; /^#/d ; /^$/d ; s/^/  /" "$PKG_FILE"
    echo "------------------------------""$RESET"

    # and ask the user whether or not she would like to install them.
    CONTINUE=" "
    while [ "$CONTINUE" != "" ] && \
          [ "$CONTINUE" != "y" ] && \
          [ "$CONTINUE" != "Y" ] && \
          [ "$CONTINUE" != "n" ] && \
          [ "$CONTINUE" != "N" ] ; do
        read -p "  install $PKG_FILE? (Y/n): " CONTINUE
    done

    # if the user chose to install this packagefile, install it.
    [ "$CONTINUE" != "n" ] && [ "$CONTINUE" != "N" ] && {
        echo "  installing $PKG_FILE..."
        sed "s/^\s*//g ; /^#/d ; /^$/d" "$PKG_FILE" | paru -S --needed -
    }

done

echo "$BLUE"
echo "packages are installed."
echo "----------------------------------------"

# install suckless forks
echo "installing suckless forks..."
echo "$RESET"

install_suckless_fork "dwm"
install_suckless_fork "st"
install_suckless_fork "dmenu"
install_suckless_fork "xmenu"
install_suckless_fork "dwmblocks"

echo "$BLUE"
echo "suckless forks are installed."
echo "----------------------------------------"


# install zsh
echo "installing pure prompt..."
echo "$RESET"

# install zsh prompt
[ ! -d ~/.local/share/zsh/ ] && mkdir -p ~/.local/share/zsh/
[ ! -d ~/.local/share/zsh/pure/ ] && git clone https://github.com/sindresorhus/pure.git "$HOME/.local/share/zsh/pure/" || echo "pure prompt is already installed..."

echo "$BLUE"
echo "pure prompt is installed."
echo "----------------------------------------"


################################################################################
# CONFIGURE # CONFIGURE # CONFIGURE # CONFIGURE # CONFIGURE # CONFIGURE ########
################################################################################

# install dotfiles
echo "installing dotfiles..."
echo "$RESET"

# clone dotfiles unless they already exist
cd "$HOME"
[ -d "$HOME/.dotfiles" ] || git clone https://github.com/nebulaeandstars/dotfiles.git .dotfiles
cd "$HOME/.dotfiles"

# create symlinks to dotfiles using stow
cd ~/.dotfiles || exit
for PACKAGE in $(ls -d $(pwd)/*/) ; do
    echo "$MAGENTA  setting up symlinks for ""$RESET""$(basename $PACKAGE)""$MAGENTA"".$RESET"
    stow -t ~ "$(basename $PACKAGE)"
done

echo "$BLUE"
echo "dotfiles are installed."
echo "----------------------------------------"

# make caches (probably no need to notify for this)
mkdir -pv .cache/mutt

# move XDG_USER_DIRS
echo "configuring XDG_USER_DIRS..."
echo "$RESET"

[ -d "$HOME/Documents" ] && {
    echo "$MAGENTA  you are currently using the default XDG_USER_DIRS."
    echo "------------------------------$RESET"

    CONTINUE=" "
    while [ "$CONTINUE" != "" ] && \
          [ "$CONTINUE" != "y" ] && \
          [ "$CONTINUE" != "Y" ] && \
          [ "$CONTINUE" != "n" ] && \
          [ "$CONTINUE" != "N" ] ; do
        read -p "  change them? (Y/n): " CONTINUE
    done

    [ "$CONTINUE" != "n" ] && [ "$CONTINUE" != "N" ] && {
        # move xdg directories into the right places
        mv -v ~/Documents ~/docs
        mv -v ~/Downloads ~/dl
        mv -v ~/Pictures ~/img
        mv -v ~/Videos ~/vids
        mv -v ~/Music ~/music
        mv -v ~/Public ~/.local/public
        mv -v ~/Desktop ~/.local/desktop
        mv -v ~/Templates ~/.local/templates
    }
} || {
    [ -d "$HOME/docs" ] && {
        echo "XDG_USER_DIRS are already configured."
    } || {
        echo "$RED""----------------------------------------"
        echo "XDG_USER_DIRS do not exist yet. Please figure this out first."
        echo "$RESET"
        exit
    }
}

echo "$BLUE"
echo "XDG_USER_DIRS are configured."

echo "$GREEN----------------------------------------"
echo "done!"
