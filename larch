#!/bin/sh
#  _        _             _
# | |      / \   _ __ ___| |__
# | |     / _ \ | '__/ __| '_ \
# | |___ / ___ \| | | (__| | | |
# |_____/_/   \_\_|  \___|_| |_|
#
# Script for automatically configuring a fresh Arch linux install.
# by nebulaeandstars@gmail.com


################################################################################
# CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS # CONSTANTS ########
################################################################################

RED="$(tput setaf 9)"
GREEN="$(tput setaf 10)"
BLUE="$(tput setaf 12)"
MAGENTA="$(tput setaf 13)"
CYAN="$(tput setaf 14)"
RESET="$(tput sgr0)"


################################################################################
# FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS # FUNCTIONS ########
################################################################################

# sets up symlinks for a given stow directory.
config() {
    echo "setting up symlinks for $1."
    stow -t ~ "$1"
}


################################################################################
# PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM # PRELIM ########
################################################################################

# change into the larch directory.
cd $(dirname $0)

# make sure that the archlinux servers are reachable.
echo "$BLUE"
echo "----------------------------------------"
echo "connecting to the archlinux.org servers..."
echo "$RESET"

ping -c 1 -W 2 archlinux.org || {
    echo "$RED""----------------------------------------"
    echo "cannot connect to the internet. aborting..."
    echo "$RESET"
    exit
}
echo "$BLUE"
echo "connection success!"
echo "----------------------------------------"

# update the system.
echo "updating the system..."
echo "$RESET"

sudo pacman -Syu || {
    echo "$RED""----------------------------------------"
    echo "system update is required. aborting..."
    echo "$RESET"
    exit
}

echo "$BLUE"
echo "the system is up to date."
echo "----------------------------------------"

# install git and paru
echo "installing git and paru..."
echo "$RESET"

# install git
if ! pacman -Qs "git" > /dev/null ; then
    sudo pacman -S "git" --noconfirm
else
    echo "git is already installed."
fi

# install paru
if ! pacman -Qi paru > /dev/null ; then
    cd /tmp || exit
    git clone https://aur.archlinux.org/paru.git
    cd paru || exit
    makepkg -si --noconfirm
else
    echo "paru is already installed."
fi

echo "$BLUE"
echo "git and paru are installed."
echo "----------------------------------------"


################################################################################
# INSTALL # INSTALL # INSTALL # INSTALL # INSTALL # INSTALL # INSTALL ##########
################################################################################

# for each pkg-file in ./pkg, install all packages in that file.
echo "installing packages..."
echo "$RESET"

cd ./pkg
for PKG_FILE in $(ls) ; do
    # display the contained packages,
    echo "$MAGENTA  $PKG_FILE"
    echo "----------------------------------------"
    sed "s/^\s*//g ; /^#/d ; /^$/d ; s/^/  /" "$PKG_FILE"
    echo "----------------------------------------""$RESET"

    # and ask the user whether or not she would like to install them.
    CONTINUE=" "
    while \
        [ "$CONTINUE" != "" ] && \
        [ "$CONTINUE" != "Y" ] && \
        [ "$CONTINUE" != "Y" ] && \
        [ "$CONTINUE" != "y" ] && \
        [ "$CONTINUE" != "n" ] ; do
        read -p "  continue? (Y/n): " CONTINUE
    done

    [ "$CONTINUE" != "n" ] && [ "$CONTINUE" != "N" ] \
        && sed "s/^\s*//g ; /^#/d ; /^$/d" "$PKG_FILE" | paru -S --needed - \
        || echo "  skipping $PKG_FILE..."

    echo
done
